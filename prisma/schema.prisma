// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  username      String    @unique
  name          String
  emailVerified DateTime  @map("email_verified")
  image         String?
  bio           String?
  isOnboard     Boolean   @default(false)
  thoughts      Thought[]
  followedBy    User[]   @relation("UserFollows", fields: [followedByIDs], references: [id])
  followedByIDs String[] @db.ObjectId
  following     User[]   @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs  String[] @db.ObjectId
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model Thought {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  text         String
  isPublic     Boolean
  authorId     String    @db.ObjectId
  responseToId String?   @db.ObjectId
  responseTo   Thought?  @relation("ResponseToThought", fields: [responseToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  responses    Thought[] @relation("ResponseToThought")
  quotedById   String?    @db.ObjectId
  quotedBy     Thought?  @relation("QuotedThought", fields: [quotedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  quotes       Thought[] @relation("QuotedThought")
  author       User      @relation(fields: [authorId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("thoughts")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
